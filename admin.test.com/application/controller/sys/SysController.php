<?php/*------------ * 系统管理 *-----------*/use application\ext\Common;use application\ext\Response;use application\module\UserModule;use application\module\UserGroupModule;use application\module\LogModule;use Gregwar\Captcha\CaptchaBuilder;use application\ext\Page;class SysController extends Controller {	public function __construct(){		parent::__construct();	}	//系统主界面	public function index(){		$leftMenu = $this->createLeftMenu();		$group = (new UserGroupModule())->getGroupById( $this->getSession('groupid') );		$this->assign('uname',$this->getSession('uname'));		$this->assign('gname',$group['gname']);		//$this->assign('url',$_SERVER['']);		$this->assign('leftMenu',$leftMenu);	}    //左侧菜单	private function createLeftMenu(){        $menuData = $this->getMenu();//获取菜单数据        $authArr = $this->checkGrant();//获取用户左侧菜单权限        $leftMenuHtml = $this->createLeftMenuTree($menuData,$authArr);//获取左侧html菜单树        return $leftMenuHtml;	}    //创建左侧html菜单    private function createLeftMenuTree($menuData,$authArr,$leftMenuHtml=''){		foreach ($menuData as $key=>$val){            if( !in_array($val['id'],$authArr) ){				if( $this->getSession('uid') != 1 ){//根用户无需要验证					unset($menuData[$key]);					continue;				}            }            if( $val['status'] != 1 ){                continue;            }            if( is_array($val['_child']) && !empty($val['_child']) ){                if($val['pid'] == 0){//根目录                    $leftMenuHtml .= "<dl><dt><i class=\"Hui-iconfont\">{$val['icon']}</i> {$val['name']}<i class=\"Hui-iconfont menu_dropdown-arrow\">&#xe6d5;</i></dt><dd><ul>";                    $leftMenuHtml = $this->createLeftMenuTree($val['_child'],$authArr,$leftMenuHtml).'</ul></dd></dl>';                }else{                    foreach ($val['_child'] as $k=>$v){                        if($v['status'] != 1){                            unset($val['_child'][$k]);                        }                        if(!in_array($v['id'],$authArr)){                            unset($val['_child'][$k]);                        }                    }                    if(!empty($val['_child'])){//目录						$leftMenuHtml = $this->createLeftMenuTree($val['_child'],$authArr,$leftMenuHtml);                    }else{						$leftMenuHtml .= "<li><a data-href='?m={$val['module']}&c={$val['controller']}&a={$val['action']}' data-title='{$val['name']}' href='javascript:void(0)'>{$val['name']}</a></li>";                    }                }            }else{                if($val['pid'] == 0){                    $leftMenuHtml .= "<dl><dt><i class=\"Hui-iconfont\">{$val['icon']}</i> {$val['name']}<i class=\"Hui-iconfont menu_dropdown-arrow\">&#xe6d5;</i></dt><dd><ul></ul></dd></dl>";                }else{                    $leftMenuHtml .= "<li><a data-href='?m={$val['module']}&c={$val['controller']}&a={$val['action']}' data-title='{$val['name']}' href='javascript:void(0)'>{$val['name']}</a></li>";                }            }        }        return $leftMenuHtml;    }    //获取菜单数据    private function getMenu($where=1){		$sysMenu = $this->module->getMenuList($where);        if( empty($sysMenu) ){            return false;        }        if( is_numeric($where) && $where == 1 ){            $sysMenu = Common::list_to_tree($sysMenu);        }        return $sysMenu;    }	//系统菜单管理	public function menuList(){		$where = '1';		if($this->post['name']){			$where .= " and `name`='{$this->post['name']}'";		}		if($this->post['module']){			$where .= " and `module`='{$this->post['module']}'";		}		if($this->post['controller']){			$where .= " and `controller`='{$this->post['controller']}'";		}		if($this->post['action']){			$where .= " and `action`='{$this->post['action']}'";		}		$menuSearchList = $this->getMenu();//搜索下拉框菜单列表		$menuData = $this->getMenu($where);		$menuSearchList = !empty($menuSearchList) ? $menuSearchList : [];		$menuData = !empty($menuData) ? $menuData : [];		if( $this->post['id'] ){			$menuData = Common::list_to_tree($menuData);			foreach ($menuData as $key => $val) {				if( $val['id'] != $this->post['id'] ){					unset($menuData[$key]);				}			}			$menuList = Common::tree_to_list($menuData);		}else{			$menuList = Common::tree_to_list($menuData);		}		$this->assign('whereData',$this->post);		$this->assign('menuSearchList',$menuSearchList);		$this->assign('menuList',$menuList);	}	//添加菜单	public function menuAdd(){		if($this->post){			$data['pid'] = (int)$this->post['pid'];			$data['name'] = $this->post['name'];			$data['module'] = $this->post['module'];			$data['controller'] = $this->post['controller'];			$data['action'] = $this->post['action'];			$data['sort'] = (int)$this->post['sort'];			$data['status'] = (int)$this->post['status'];			$data['icon'] = $this->post['icon'];			$data['remark'] = $this->post['remark'];			if($this->module->addMenu($data)){				Response::response(Response::SUCCESS);			}else{				Response::response(Response::FAIL);			}		}else{			$menuList = $this->getMenu();			$this->assign('menuList',$menuList);		}	}	//编辑菜单	public function menuEdit(){		if($this->post){			$data['id'] = (int)$this->post['id'];			$data['pid'] = (int)$this->post['pid'];			$data['name'] = $this->post['name'];			$data['module'] = $this->post['module'];			$data['controller'] = $this->post['controller'];			$data['action'] = $this->post['action'];			$data['sort'] = (int)$this->post['sort'];			$data['status'] = (int)$this->post['status'];			$data['icon'] = $this->post['icon'];			$data['remark'] = $this->post['remark'];			if($this->module->editMenu($data,$data['id'])){				Response::response(Response::SUCCESS);			}else{				Response::response(Response::FAIL);			}		}else{            if( empty($this->get['id']) ){				Response::response(10100);            }            $menuList = $this->getMenu();            $menu = $this->module->getMenuById($this->get['id']);            $this->assign('menuList',$menuList);            $this->assign('menu',$menu);        }	}	//删除菜单	public function menuDel(){		if($this->post['id']){			if($this->module->delMenu($this->post['id'])){				Response::response(Response::SUCCESS);			}		}else if($this->get['id']){			if($this->module->delMenu($this->get['id'])){				Response::response(Response::SUCCESS);			}		}		Response::response(Response::FAIL);	}	//操作日志查询	public function Log(){		$where = '1';		$users = ( new UserModule() )->getUser();		if(!$this->post['sdate']){			$this->post['sdate'] = date('Y-m-d',strtotime('-1 day'));			$sdate = strtotime('-1 day');		}else{			$sdate = strtotime($this->post['sdate']);		}		if(!$this->post['edate']){			$this->post['edate'] = date('Y-m-d H:i:s',time());			$edate = time();		}else{			$edate = strtotime($this->post['edate']);		}		if($this->post['uid']){			$where .= " and `uid`='{$this->post['uid']}'";		}		if($this->post['module']){			$where .= " and `module`='{$this->post['module']}'";		}		if($this->post['controller']){			$where .= " and `controller`='{$this->post['controller']}'";		}		if($this->post['action']){			$where .= " and `action`='{$this->post['action']}'";		}		if($this->post['ip']){			$where .= " and `ip`='{$this->post['ip']}'";		}		$where .= " and `addtime`>={$sdate} and `addtime`<={$edate}";		$LogModule = new LogModule();		$totalCount = $LogModule->getLogCount($where);		//分页显示		$page_html = Page::showPager($this->page_no,$this->page_size,$totalCount);		$limitStart = ($this->page_no-1)*$this->page_size;		$logs = $LogModule->getLog($where,'desc',"{$limitStart},{$this->page_size}");		$this->assign('whereData',$this->post);		$this->assign('users',$users);		$this->assign('logs',$logs);		$this->assign('page_html',$page_html);	}		//验证码	public function vcode(){		$builder = new CaptchaBuilder;		$_SESSION['checkCode'] = $builder->getPhrase();		$builder->build();		header('Content-type: image/jpeg');		$builder->output();	}}